package com.meitianhui.supplierCentre.controller;

import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.meitianhui.platform.cache.jedis.RedisUtils;
import com.meitianhui.platform.constant.CommonConstant;
import com.meitianhui.platform.entity.ResultVO;
import com.meitianhui.platform.exception.PlatformApiException;
import com.meitianhui.platform.utils.IDUtil;
import com.meitianhui.platform.utils.SMSUtils;
import com.meitianhui.partner.entity.SessionUser;
import com.meitianhui.supplierCentre.util.ActionHelper;
import com.meitianhui.supplierCentre.util.BaseApiUtil;
import com.meitianhui.supplierCentre.util.DataUtil;
import com.meitianhui.supplierCentre.util.ValidateCodeImageHepler;

/***
 * 
 * 用户账号管理 
 * @author 丁硕
 * @date 2016年9月21日
 */
@Controller
@RequestMapping("account")
public class AccountController {
	
	private Log logger = LogFactory.getLog(AccountController.class);
	
	//验证码存入缓存中的前缀
	private final String code_cache_prefix = "supplier_login_validCode_";
	
	//图形验证码的session
	private final String session_image_valid_code = "session_image_valid_code";

	/***
	 * 用户登录页面
	 * @return
	 * @author 丁硕
	 * @date   2016年9月21日
	 */
	@RequestMapping("login")
	public String login(HttpServletRequest request, HttpServletResponse response){
		return "login";
		
	}
	
	/***
	 * 账号登录
	 * @param request
	 * @param userAccount
	 * @param password
	 * @return
	 * @author 丁硕
	 * @date   2016年9月21日
	 */
	@RequestMapping(value="accountLogin", method = RequestMethod.POST)
	public @ResponseBody ResultVO<Object> accountLogin(HttpServletRequest request, HttpServletResponse response,
			@RequestParam(required=true) String mobile, @RequestParam(required=true) String validCode){
		ResultVO<Object> resultVo = new ResultVO<Object>();
		try{
			//验证码验证
			//if(validCode.equalsIgnoreCase(RedisUtils.get(code_cache_prefix + mobile) + "")){	//验证通过
				Map<String, Object> params  = new HashMap<String, Object>();
				//构建requestInfo
				JSONObject requestInfo = new JSONObject();
				requestInfo.put("ip", ActionHelper.getIpAddr(request));
				requestInfo.put("device_model", "PC");
				params.put("mobile", mobile);
				params.put("request_info", requestInfo.toString());
				JSONObject json = BaseApiUtil.supplierLogin(params);
				SessionUser user = new SessionUser(json.getString("member_id"), json.getString("supplier_name"), json.getString("supplier_no"), json.getString("mobile"), "Y".equals(json.getString("is_admin")),DataUtil.FROMCENTRE);
				ActionHelper.setSessionUser(response, user);
				resultVo.setMsg("登录成功！");
				resultVo.setStatus(CommonConstant.RESULT_STATE_SUSS);
			/*} else{
				throw new PlatformApiException("手机验证码不正确！");
			}*/
		} catch(Exception e){
			resultVo.setMsg(e instanceof PlatformApiException ? e.getMessage() : "登录失败！");
			resultVo.setStatus(CommonConstant.RESULT_STATE_FAIL);
			logger.error("登录失败！", e);
		}
		return resultVo;
	}
	
	/***
	 * 获取图形验证码
	 * @param request
	 * @param response
	 * @author 丁硕
	 * @date   2016年9月22日
	 */
	@RequestMapping(value = "getImageValidCode", method = RequestMethod.GET)
	public void getImageValidCode(HttpServletRequest request, HttpServletResponse response){
		try{
			ValidateCodeImageHepler codeHelper = new ValidateCodeImageHepler();
			String result = codeHelper.getCreateValidImageResult(request, response);
			request.getSession().setAttribute(session_image_valid_code, result);
		} catch(Exception e){
			logger.error("获取图形验证码失败", e);
		}
	}
	
	/***
	 * 获取短信验证码
	 * @param request
	 * @param mobile
	 * @param imageCode
	 * @return
	 * @author 丁硕
	 * @date   2016年9月22日
	 */
	@RequestMapping(value = "getValidCode", method = RequestMethod.POST)
	public @ResponseBody ResultVO<String> getValidCode(HttpServletRequest request, @RequestParam(required=true) String mobile, @RequestParam(required=true) String imageCode){
		ResultVO<String> resultVo = new ResultVO<String>();
		try{
			Pattern p = Pattern.compile("^[1][3,4,5,7,8][0-9]{9}$"); // 验证手机号
			if(p.matcher(mobile.trim()).matches()){
				//1、首先验证图形码是否正确
				if(!imageCode.equalsIgnoreCase(request.getSession().getAttribute(session_image_valid_code) + "")){
					throw new PlatformApiException("图形验证码不正确！");
				}
				//2、验证是否过期后获取
				if(RedisUtils.get(code_cache_prefix + mobile) != null){
					throw new PlatformApiException("请稍后获取！");
				}
				//3、验证账号是否存在
				boolean isExists = BaseApiUtil.validAccountExists(mobile);
				if(!isExists){
					throw new PlatformApiException("账号不存在！");
				}
				//验证成功，发送短信
				final String validCode = IDUtil.random(6);	//生成验证码
				SMSUtils.send(mobile, "您的的验证码为" + validCode + "，请不要把验证码泄露给任何人，如非本人操作，请忽略此短信。");
				logger.info("获取供应商登录短信验证码为：" + validCode);
				//TODO 以后可能需要限制IP
				RedisUtils.put(code_cache_prefix + mobile, validCode, 60);
				//移除图形验证码
				request.getSession().removeAttribute(session_image_valid_code);
				resultVo.setMsg("短信发送成功！");
				resultVo.setStatus(CommonConstant.RESULT_STATE_SUSS);
			} else{
				throw new PlatformApiException("请输入正确的手机号！");
			}
		} catch(Exception e){
			resultVo.setMsg(e instanceof PlatformApiException ? e.getMessage() : "获取短信验证码失败！");
			resultVo.setStatus(CommonConstant.RESULT_STATE_FAIL);
			logger.error("获取短信验证码失败！" +  e.getMessage());
		}
		return resultVo;
	}
	
	/***
	 * 登出
	 * @param request
	 * @return
	 * @author 丁硕
	 * @date   2016年9月21日
	 */
	@RequestMapping("logout")
	public String logout(HttpServletRequest request, HttpServletResponse response){
		ActionHelper.removeSessionUser(request, response);
		return "login";
	}
}
